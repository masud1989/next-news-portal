generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id Int @id  @default(autoincrement())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @db.VarChar(50) @unique
  password String @db.VarChar(50) 
  mobile String @db.VarChar(50)
  otp String @db.VarChar(10)

  comments comments []

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt 
}

model comments {
  id Int @id  @default(autoincrement())
  descriptions String @db.VarChar(1000)

  userId Int 
  users users @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  postId Int 
  news_list news_list @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}


model news_list {
  id Int @id  @default(autoincrement())
  title String @db.VarChar(100)
  keywords String @db.VarChar(300)
  short_desc String @db.VarChar(400)
  long_desc String @db.LongText
  img1 String @db.VarChar(300)
  img2 String @db.VarChar(300)
  img3 String @db.VarChar(300)
  img4 String @db.VarChar(300)
  type String @db.VarChar(300)

  catId Int
  categories categories @relation(fields: [catId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  comments comments[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt 
}

model categories {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  news_list news_list[]
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt 
}


model socials {
  id Int @id @default(autoincrement())
  facebook String @db.VarChar(100)
  youtube String @db.VarChar(100)
  twitter String @db.VarChar(100)
  linkedin String @db.VarChar(100)
  about String @db.Text
  address String @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt 
}

model subscribers {
  id Int @id @default(autoincrement())
  email String @db.VarChar(55)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt 
}

model policies {
  id Int @id @default(autoincrement())
  long_desc String @db.LongText
  type String @db.VarChar(55)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt 
}
